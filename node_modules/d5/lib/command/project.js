var fs = require('fs'),
    path = require('path'),
    mkdirp = require('mkdirp'),
    wash = require('wash'),
    _ = require('underscore');

var yargs = require('yargs')
    .option('t', { alias: 'template', default: 'node', describe: 'template type: node' })
    .option('p', { alias: 'path', default: '.', describe: 'parent directory to create a project directory under' })
    .option('d', { alias: 'desc', default: '', describe: 'project description '});

var projectName = null;
var argv = null;
var templateContext = {};

function setupContext() {
    for(var key in settings) {
        var val = settings[key];

        if(_.isString(val)) {
            templateContext[key] = val
                .replace('$(projectName)', projectName)
                .replace('$(projectDesc)', argv.d);
        } else {
            templateContext[key] = val;
        }
    }
}

function writeFile(srcFile, destPath) {
    var srcContents = fs.readFileSync(srcFile, { encoding: 'utf8' });
    var rendered = wash.render(srcContents, templateContext);
    fs.writeFileSync(destPath, rendered);
}

function copyDir(srcDir, destDir) {
    mkdirp.sync(destDir);

    var entries = fs.readdirSync(srcDir);
    for(var i in entries) {
        var entry = entries[i];
        var srcFile = path.join(srcDir, entry);
        var destFile = path.join(destDir, entry);

        if(entry === '_gitignore') {
            destFile = path.join(destDir, '.gitignore');
        } else if(entry.indexOf('%%projectName%%') != -1) {
            destFile = path.join(destDir, entry.replace('%%projectName%%', projectName));
        }

        var stat = fs.statSync(srcFile);
        if(stat.isDirectory()) {
            copyDir(srcFile, destFile);
        } else {
            writeFile(srcFile, destFile);
        }
    }
}

exports = module.exports = function(args) {
    argv = yargs.parse(args);
    if(argv._.length == 0) {
        console.error('Usage: d5 project {name} [opts ...]');
        process.exit(1);
    }
    
    projectName = argv._[0];

    setupContext();

    var projectDir = path.join(argv.p, projectName);
    if(fs.existsSync(projectDir)) {
        console.error('Error: target directory already exists "' + projectDir + '"');
        process.exit(1);
    }

    var templateDir = path.join(__dirname, '../../templates/project/' + argv.t);
    if(!fs.existsSync(templateDir)) {
        console.error('Error: template "' + argv.t + '" not available');
        process.exit(1);
    }

    copyDir(templateDir, projectDir);
};

exports.help = function() {
    console.log('Create a project from templates.');
    console.log('Usage: d5 project {name} [opts ...]');
    console.log();
    yargs.showHelp();
};